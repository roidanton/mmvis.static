<?xml version="1.0" encoding="utf-8"?>
<!--
  Billboard shader
 
  Copyright (C) 2009-2015 by MegaMol Team
  Copyright (C) 2015 by Richard HÃ¤hne, TU Dresden
  Alle Rechte vorbehalten.
-->
<btf type="MegaMolGLSLShader" version="1.0" namespace="billboard">
  <!--
    Converted from version 330 to 120.
    @see http://stackoverflow.com/questions/20161057/opengl-3-glsl-compatibility-mess
  -->
  <!--<include file="common" />-->

    <shader name="vertex">
        <snippet type="version">120</snippet>
        <!--<snippet name="common::defines" />-->
        <snippet name="shaderVar" type="string">
            <![CDATA[
attribute vec3 eventPosition;
attribute vec2 spanQuad;
attribute vec2 texUV;
varying vec2 f_texUV;
attribute float eventType; // varying may not be int
varying float f_eventType;
            ]]>
        </snippet>
        <snippet name="uniformVar" type="string">
            <![CDATA[
uniform float quadSizeModificator;
            ]]>
        </snippet>
        <snippet name="main" type="string">
            <![CDATA[
void main(void) {

    // Pass texture coordinates to fragment shader.
    f_texUV = texUV;
    
    // Pass event type to fragment shader.
    f_eventType = eventType;

    // Set position.
    // gl_Position.w = 1.0f; // Homogener Vektor: 1 = normalisierter Punkt (Position) im Raum, 0 = Vektor/Richtung (kein Punkt)
    vec4 projectedEventPosition = gl_ProjectionMatrix * gl_ModelViewMatrix * vec4(eventPosition, 1.0f);
    
    // Reposition the vertice to create a quad.
    gl_Position = vec4(spanQuad, 0.0f, 1.0f) * quadSizeModificator + projectedEventPosition;
}
            ]]>
        </snippet>
    </shader>

    <shader name="fragment">
        <snippet type="version">120</snippet>
        <!--<snippet name="common::defines" />-->
        <!--<snippet name="common::lighting::simple" />--><!-- lighting -->
        <snippet name="generic" type="string">
            <![CDATA[
uniform sampler2D tex2DBirth;
uniform sampler2D tex2DDeath;
uniform sampler2D tex2DMerge;
uniform sampler2D tex2DMergeAB;
varying vec2 f_texUV;
varying float f_eventType;

void main() {
    vec4 tex2D;
    // Set texture. Eventtype wird irgendwie nicht erkannt.
    if (f_eventType < 0.9f) {
      tex2D = texture2D(tex2DBirth, f_texUV).rgba * vec4(0,.8,0,1);
    }
    else if (f_eventType < 1.9f) {
      tex2D = texture2D(tex2DDeath, f_texUV).rgba * vec4(.8,0,0,1);
    }
    else if (f_eventType < 2.9f) {
      tex2D = texture2D(tex2DMerge, f_texUV).rgba * vec4(0,0,.8,1);
    }
    
    // Don't draw if the pixel is transparent. This is kinda a hack
    // since it doesn't allow Alpha transparency but much less work
    // than reodering vertices (draw from back to front) or Alphatest.
    if (tex2D.a < .1) {
      discard;
    }
    
    gl_FragColor = tex2D;
}
            ]]>
        </snippet>
    </shader>
</btf>
