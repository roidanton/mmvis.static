<?xml version="1.0" encoding="utf-8"?>
<!--
  Billboard shader
 
  Copyright (C) 2009-2015 by MegaMol Team
  Copyright (C) 2015 by Richard HÃ¤hne, TU Dresden
  Alle Rechte vorbehalten.
-->
<btf type="MegaMolGLSLShader" version="1.0" namespace="billboard">
  <!--
    Converted from version 330 to 120.
    @see http://stackoverflow.com/questions/20161057/opengl-3-glsl-compatibility-mess
  -->
  <!--<include file="common" />-->

    <shader name="vertex">
        <snippet type="version">120</snippet>
        <!--<snippet name="common::defines" />-->
        <snippet name="shaderVar" type="string">
            <![CDATA[
attribute vec3 eventPosition;
attribute vec2 spanQuad;
attribute vec2 texUV;
varying vec2 f_texUV;
attribute float eventType; // varying may not be int
varying float f_eventType;
attribute vec3 colorHSV;
varying vec3 f_colorHSV;
attribute float opacity;
varying float f_opacity;
attribute float timeTextureType;
varying float f_timeTextureType;
attribute float relativeTime;
varying float f_relativeTime;
            ]]>
        </snippet>
        <snippet name="uniformVar" type="string">
            <![CDATA[
uniform float quadSizeModificator;
            ]]>
        </snippet>
        <snippet name="main" type="string">
            <![CDATA[
void main(void) {

    // Pass texture coordinates to fragment shader.
    f_texUV = texUV;
    // Pass event type to fragment shader.
    f_eventType = eventType;
    // Pass color to fragment shader.
    f_colorHSV = colorHSV;
    // Pass opacity to fragment shader.
    f_opacity = opacity;
    // Pass time texture type to fragment shader.
    f_timeTextureType = timeTextureType;
    // Pass relative time to fragment shader.
    f_relativeTime = relativeTime;

    // gl_Position.w = 1.0f; // Homogener Vektor: 1 = normalisierter Punkt (Position) im Raum, 0 = Vektor/Richtung (kein Punkt)

    ///
    /// Create quad in projected space. Not needed anymore.
    ///
    /*
    // Set position.
    vec4 position = gl_ProjectionMatrix * gl_ModelViewMatrix * vec4(eventPosition, 1.0f); // w = 1 since its a point
    
    // Reposition the vertice to create a quad.
    // @TODO: Make translated position independent from window ratio (quad should be quadratic and not stretched!)
    position += vec4(spanQuad, 0.0f, 0.0f) * vec4(quadSizeModificator, quadSizeModificator, 0.0f, 0.0f); // w = 0, since spanQuad is a direction.
    
    // Finalize.
    gl_Position = position;
    */
    
    ///
    /// Create quad in view space.
    ///
    
    // Set position.
    vec4 position = gl_ModelViewMatrix * vec4(eventPosition, 1.0f); // w = 1 since its a point
    
    // Reposition the vertice to create a quad.
    position += vec4(spanQuad, 0.0f, 0.0f) * vec4(quadSizeModificator, quadSizeModificator, 0.0f, 0.0f); // w = 0, since spanQuad is a direction.    
    
    // If this is the time quad, move it a little back so it is behind the textured event quad.
    if (eventType < 4.9f)
      position -= vec4(0.0f, 0.0f, 0.01f, 0.0f);

    // Finalize.
    gl_Position = gl_ProjectionMatrix * position;
}
            ]]>
        </snippet>
    </shader>

    <shader name="fragment">
        <snippet type="version">120</snippet>
        <!--<snippet name="common::defines" />-->
        <!--<snippet name="common::lighting::simple" />--><!-- lighting -->
        <snippet name="variables" type="string">
            <![CDATA[
uniform sampler2D tex2DBirth;
uniform sampler2D tex2DDeath;
uniform sampler2D tex2DMerge;
uniform sampler2D tex2DSplit;
//uniform sampler2D tex2DTimeBackground; // Obsolete.
varying vec2 f_texUV;
varying float f_eventType;
varying vec3 f_colorHSV;
varying float f_opacity;
varying float f_timeTextureType;
varying float f_relativeTime;
            ]]>
      </snippet>
      <snippet name="colorConversion" type="string">
            <![CDATA[
/**
 * Convert HSV values to RGB values.
 * Range: Hue, Saturation, Value = [0,1]
 * @see http://stackoverflow.com/questions/3018313/algorithm-to-convert-rgb-to-hsv-and-hsv-to-rgb-in-range-0-255-for-both
 * @see http://gamedev.stackexchange.com/questions/59797/glsl-shader-change-hue-saturation-brightness
 */
vec3 HSV2RGB( vec3 hsv ) {
      ///
      /// The idea here to avoid conditions is to notice that the conversion code can be rewritten:
      ///    if      ( var_i == 0 ) { R = V         ; G = TempRGB.z ; B = TempRGB.x }
      ///    else if ( var_i == 2 ) { R = TempRGB.x ; G = V         ; B = TempRGB.z }
      ///    else if ( var_i == 4 ) { R = TempRGB.z ; G = TempRGB.x ; B = V     }
      ///
      ///    else if ( var_i == 1 ) { R = TempRGB.y ; G = V         ; B = TempRGB.x }
      ///    else if ( var_i == 3 ) { R = TempRGB.x ; G = TempRGB.y ; B = V     }
      ///    else if ( var_i == 5 ) { R = V         ; G = TempRGB.x ; B = TempRGB.y }
      ///
      /// This shows several things:
      ///  . A separation between even and odd slices
      ///  . If slices (0,2,4) and (1,3,5) can be rewritten as basically being slices (0,1,2) then
      ///      the operation simply amounts to performing a "rotate right" on the RGB components
      ///  . The base value to rotate is either (V, B, R) for even slices or (G, V, R) for odd slices
      ///

      hsv.x = mod( 100.0 + hsv.x, 1.0 ); // Ensure [0,1[
      float   HueSlice = 6.0 * hsv.x; // In [0,6[
      float   HueSliceInteger = floor( HueSlice );
      float   HueSliceInterpolant = HueSlice - HueSliceInteger; // In [0,1[ for each hue slice
      vec3  TempRGB = vec3(   hsv.z * (1.0 - hsv.y), hsv.z * (1.0 - hsv.y * HueSliceInterpolant), hsv.z * (1.0 - hsv.y * (1.0 - HueSliceInterpolant)) );
      float   IsOddSlice = mod( HueSliceInteger, 2.0 ); // 0 if even (slices 0, 2, 4), 1 if odd (slices 1, 3, 5)
      float   ThreeSliceSelector = 0.5 * (HueSliceInteger - IsOddSlice); // (0, 1, 2) corresponding to slices (0, 2, 4) and (1, 3, 5)
      vec3  ScrollingRGBForEvenSlices = vec3( hsv.z, TempRGB.zx );           // (V, Temp Blue, Temp Red) for even slices (0, 2, 4)
      vec3  ScrollingRGBForOddSlices = vec3( TempRGB.y, hsv.z, TempRGB.x );  // (Temp Green, V, Temp Red) for odd slices (1, 3, 5)
      vec3  ScrollingRGB = mix( ScrollingRGBForEvenSlices, ScrollingRGBForOddSlices, IsOddSlice );
      float   IsNotFirstSlice = clamp( ThreeSliceSelector, 0.0, 1.0 );                   // 1 if NOT the first slice (true for slices 1 and 2)
      float   IsNotSecondSlice = clamp( ThreeSliceSelector-1.0, 0.0, 1.0 );              // 1 if NOT the first or second slice (true only for slice 2)
      return  mix( ScrollingRGB.xyz, mix( ScrollingRGB.zxy, ScrollingRGB.yzx, IsNotSecondSlice ), IsNotFirstSlice );    // Make the RGB rotate right depending on final slice index
      
}
            ]]>
      </snippet>
      <snippet name="main" type="string">
        <![CDATA[
void main() {

    vec4 tex2D;
    
    // Revert to "normal" UV handling (known from Blender etc).
    vec2 f_texUV_inverse = vec2(f_texUV.s, 1.0f - f_texUV.t);
    
    /// Set texture.
    /// 0 := Birth, 1 := Death, 2 := Merge, 3 := Split
    /// Event type 4 := no event quad but time quad
    if (f_eventType < 0.9f) {
      tex2D = texture2D(tex2DBirth, f_texUV_inverse).rgba;
    }
    else if (f_eventType < 1.9f) {
      tex2D = texture2D(tex2DDeath, f_texUV_inverse).rgba;
    }
    else if (f_eventType < 2.9f) {
      tex2D = texture2D(tex2DMerge, f_texUV_inverse).rgba;
    }
    else if (f_eventType < 3.9f) {
      tex2D = texture2D(tex2DSplit, f_texUV_inverse).rgba;
    }
    //else if (f_eventType < 4.9f) { // Time quad. Obsolete.
    //  tex2D = texture2D(tex2DTimeBackground, f_texUV_inverse).rgba;
    //}
    
    ///
    /// Don't draw if the pixel is transparent. This is kinda a hack
    /// since it doesn't allow Alpha transparency but much less work
    /// than reodering vertices (draw from back to front) or Alphatest.
    ///
    if (tex2D.a < .1) {
      discard;
    }

    // Set opacity.
    if (f_opacity > 0.0f)
      tex2D = vec4(tex2D.rgb, tex2D.a * f_opacity);

    // Set time.
    if (f_timeTextureType < 0.9f) { // No time texture.
        // Check if pixel has to be replaced.
        if (tex2D.r > .6f
          && tex2D.g < .4f
          && tex2D.b > .6f) {
            float f = 250f / 255f;
            tex2D.rgb = vec3(f);
        }
        else {
            tex2D.rgb *= HSV2RGB(f_colorHSV);
        }
    }
    else if (f_timeTextureType < 1.9f) { // Filling time type.
        // Check if pixel has to be replaced.
        if (tex2D.r > .6f
          && tex2D.g < .4f
          && tex2D.b > .6f) {
            // Check uv coordinates for time filling.
            if (f_texUV.t > f_relativeTime) {
                float f = 250f / 255f;
                tex2D.rgb = vec3(f);
            }
            else {
                float f = 128f / 255f;
                tex2D.rgb = vec3(f);
            }
        }
    }

    // Multitexturing for second time texture. Not implemented, one texture is enough.
    //vec4 t1 = texture(top_tex, tex_coord), t2 = texture(bottom_tex, tex_coord); gl_FragColor = mix(t2, t1, t1.a);
    //vec4 tex2DBackground = texture2D(tex2DTimeBackground, f_texUV_inverse).rgba;
    //tex2D = vec4(mix(tex2DBackground.rgb, tex2D.rgb, length(tex2D.rgb) / sqrt(3.0)), tex2D.a);

    /// Finalize.
    gl_FragColor = tex2D;
}
            ]]>
        </snippet>
    </shader>
</btf>
